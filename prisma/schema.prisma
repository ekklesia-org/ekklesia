generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id        String          @id @default(cuid())
  name      String
  slug      String          @unique
  email     String          @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  website   String?
  logoUrl   String?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  settings  ChurchSettings?
  users     User[]

  @@map("churches")
}

model ChurchSettings {
  id             String   @id @default(cuid())
  churchId       String   @unique
  timezone       String   @default("America/Sao_Paulo")
  currency       String   @default("BRL")
  fiscalYear     String   @default("calendar")
  enabledModules String[]
  enableOCR      Boolean  @default(false)
  ocrApiKey      String?
  bankName       String?
  accountNumber  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  church         Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("church_settings")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  isActive  Boolean    @default(true)
  role      UserRole   @default(MEMBER)
  churchId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lastLogin DateTime?
  auditLogs AuditLog[]
  member    Member?
  church    Church?    @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Member {
  id            String        @id @default(cuid())
  churchId      String
  firstName     String
  lastName      String
  email         String?
  phone         String?
  dateOfBirth   DateTime?
  cpf           String?       @unique
  rg            String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  status        MemberStatus  @default(ACTIVE)
  maritalStatus MaritalStatus @default(SINGLE)
  baptismDate   DateTime?
  memberSince   DateTime      @default(now())
  spouseId      String?       @unique
  profession    String?
  notes         String?
  photoUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String?       @unique
  spouse        Member?       @relation("Spouse", fields: [spouseId], references: [id])
  spouseOf      Member?       @relation("Spouse")
  user          User?         @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@map("members")
}

model Transaction {
  id              String              @id @default(cuid())
  churchId        String
  description     String
  amount          Decimal             @db.Decimal(10, 2)
  type            TransactionType
  category        TransactionCategory
  status          TransactionStatus   @default(PENDING)
  transactionDate DateTime
  referenceNumber String?
  bankAccount     String?
  bankReference   String?
  memberId        String?
  isFromOCR       Boolean             @default(false)
  ocrData         Json?
  attachments     String[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  member          Member?             @relation(fields: [memberId], references: [id])

  @@map("transactions")
}

model AuditLog {
  id         String   @id @default(cuid())
  churchId   String
  userId     String
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  SUPER_ADMIN
  CHURCH_ADMIN
  PASTOR
  TREASURER
  SECRETARY
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  DECEASED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  TITHE
  OFFERING
  DONATION
  EVENT_INCOME
  UTILITIES
  MAINTENANCE
  SUPPLIES
  MINISTRY
  SALARY
  OTHER
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
